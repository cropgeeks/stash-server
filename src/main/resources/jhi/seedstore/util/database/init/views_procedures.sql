DROP VIEW IF EXISTS `view_table_containers`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_containers` AS select `c`.`id` as `container_id`, `c`.`barcode` as `container_barcode`, `c`.`description` as `container_description`, `ct`.`id` as `container_type_id`, `ct`.`name` as `container_type_name`, `ct`.`description` as `container_type_description`, `ct`.`icon` as `container_type_icon`, `cp`.`id` as `parent_id`, `cp`.`barcode` as `parent_barcode`, `cp`.`description` as `parent_description`, `ctp`.`id` as `parent_container_type_id`, `ctp`.`name` as `parent_container_type_name`, `ctp`.`description` as `parent_container_type_description`, `ctp`.`icon` as `parent_container_type_icon`, `c`.`is_active` as `container_is_active`, `trials`.`id` as `trial_id`, `trials`.`name` as `trial_name`, `trials`.`description` as `trial_description`, `projects`.`id` as `project_id`, `projects`.`name` as `project_name`, `projects`.`description` as `project_description`, ( select json_arrayagg(json_object('attributeId', `attributes`.`id`, 'attributeName', `attributes`.`name`, 'attributeValue', `container_attributes`.`attribute_value`)) from (`container_attributes` left join `attributes` on ((`attributes`.`id` = `container_attributes`.`attribute_id`))) where (`container_attributes`.`container_id` = `c`.`id`)) as `container_attributes`, ( select count(1) from `containers` `sc` where `sc`.`parent_container_id` = `c`.`id`) as `sub_container_count`, `c`.`created_on` as `created_on` from `containers` `c` left join `containers` `cp` on `c`.`parent_container_id` = `cp`.`id` left join `container_types` ct on `c`.`container_type_id` = `ct`.`id` left join `container_types` ctp on `cp`.`container_type_id` = `ctp`.`id` left join `trials` on `trials`.`id` = `c`.`trial_id` left join `projects` on `projects`.`id` = `c`.`project_id`;

DROP VIEW IF EXISTS `view_table_transfers`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_transfers` AS select `transfer_logs`.`id` as `transfer_log_id`, `c`.`id` as `container_id`, `c`.`barcode` as `container_barcode`, `c`.`description` as `container_description`, `s`.`id` as `source_id`, `s`.`barcode` as `source_barcode`, `s`.`description` as `source_description`, `t`.`id` as `target_id`, `t`.`barcode` as `target_barcode`, `t`.`description` as `target_description`, `users`.`id` as `user_id`, `users`.`name` as `user_name`, `transfer_logs`.`created_on` as `created_on`, `transfer_logs`.`updated_on` as `updated_on` from `transfer_logs` left join `containers` `c` on `c`.`id` = `transfer_logs`.`container_id` left join `containers` `s` on `s`.`id` = `transfer_logs`.`source_id` left join `containers` `t` on `t`.`id` = `transfer_logs`.`target_id` left join `users` on `transfer_logs`.`user_id` = `users`.`id`;

DROP VIEW IF EXISTS `view_table_transfer_events`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_transfer_events` AS select DATE(`transfer_logs`.`created_on`) as `date`, `s`.`id` as `source_id`, `s`.`barcode` as `source_barcode`, `st`.`name` as `source_type`, `t`.`id` as `target_id`, `t`.`barcode` as `target_barcode`, `tt`.`name` as `target_type`, `users`.`id` as `user_id`, `users`.`name` as `user_name`, count(1) as `container_count`, JSON_ARRAYAGG(`transfer_logs`.`container_id`) as `container_ids` from `transfer_logs` left join `containers` `s` on `transfer_logs`.`source_id` = `s`.`id` left join `containers` `t` on `transfer_logs`.`target_id` = `t`.`id` left join `container_types` `st` on `st`.`id` = `s`.`container_type_id` left join `container_types` `tt` on `tt`.`id` = `t`.`container_type_id` left join `users` on `users`.`id` = `transfer_logs`.`user_id` group by `transfer_logs`.`source_id`, `transfer_logs`.`target_id`, `transfer_logs`.`user_id`, DATE(`transfer_logs`.`created_on`);

DROP VIEW IF EXISTS `view_table_users`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_table_users` AS select users.id, users.name, users.email_address, users.user_type, users.last_login, users.created_on, json_objectagg(ifnull(t.yearmonth, 'null'), t.count) as stats from users left join ( select user_id, date_format(created_on, '%Y-%m') as yearmonth, count(1) as count from transfer_logs where datediff(now(), transfer_logs.created_on) <= 365 group by user_id, date_format(created_on, '%Y-%m') ) t on t.user_id = users.id group by users.id;