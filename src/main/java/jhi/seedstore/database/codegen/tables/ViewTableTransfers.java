/*
 * This file is generated by jOOQ.
 */
package jhi.seedstore.database.codegen.tables;


import java.sql.Timestamp;

import jhi.seedstore.database.codegen.SeedstoreDb;
import jhi.seedstore.database.codegen.tables.records.ViewTableTransfersRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableTransfers extends TableImpl<ViewTableTransfersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>seedstore_db.view_table_transfers</code>
     */
    public static final ViewTableTransfers VIEW_TABLE_TRANSFERS = new ViewTableTransfers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewTableTransfersRecord> getRecordType() {
        return ViewTableTransfersRecord.class;
    }

    /**
     * The column
     * <code>seedstore_db.view_table_transfers.transfer_log_id</code>.
     */
    public final TableField<ViewTableTransfersRecord, Integer> TRANSFER_LOG_ID = createField(DSL.name("transfer_log_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>seedstore_db.view_table_transfers.container_id</code>.
     */
    public final TableField<ViewTableTransfersRecord, Integer> CONTAINER_ID = createField(DSL.name("container_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfers.container_barcode</code>.
     */
    public final TableField<ViewTableTransfersRecord, String> CONTAINER_BARCODE = createField(DSL.name("container_barcode"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfers.container_description</code>.
     */
    public final TableField<ViewTableTransfersRecord, String> CONTAINER_DESCRIPTION = createField(DSL.name("container_description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>seedstore_db.view_table_transfers.source_id</code>.
     */
    public final TableField<ViewTableTransfersRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>seedstore_db.view_table_transfers.source_barcode</code>.
     */
    public final TableField<ViewTableTransfersRecord, String> SOURCE_BARCODE = createField(DSL.name("source_barcode"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfers.source_description</code>.
     */
    public final TableField<ViewTableTransfersRecord, String> SOURCE_DESCRIPTION = createField(DSL.name("source_description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>seedstore_db.view_table_transfers.target_id</code>.
     */
    public final TableField<ViewTableTransfersRecord, Integer> TARGET_ID = createField(DSL.name("target_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>seedstore_db.view_table_transfers.target_barcode</code>.
     */
    public final TableField<ViewTableTransfersRecord, String> TARGET_BARCODE = createField(DSL.name("target_barcode"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfers.target_description</code>.
     */
    public final TableField<ViewTableTransfersRecord, String> TARGET_DESCRIPTION = createField(DSL.name("target_description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>seedstore_db.view_table_transfers.user_id</code>.
     */
    public final TableField<ViewTableTransfersRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>seedstore_db.view_table_transfers.created_on</code>.
     */
    public final TableField<ViewTableTransfersRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column <code>seedstore_db.view_table_transfers.updated_on</code>.
     */
    public final TableField<ViewTableTransfersRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0), this, "");

    private ViewTableTransfers(Name alias, Table<ViewTableTransfersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewTableTransfers(Name alias, Table<ViewTableTransfersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_table_transfers` as select `seedstore`.`transfer_logs`.`id` AS `transfer_log_id`,`c`.`id` AS `container_id`,`c`.`barcode` AS `container_barcode`,`c`.`description` AS `container_description`,`s`.`id` AS `source_id`,`s`.`barcode` AS `source_barcode`,`s`.`description` AS `source_description`,`t`.`id` AS `target_id`,`t`.`barcode` AS `target_barcode`,`t`.`description` AS `target_description`,`seedstore`.`transfer_logs`.`user_id` AS `user_id`,`seedstore`.`transfer_logs`.`created_on` AS `created_on`,`seedstore`.`transfer_logs`.`updated_on` AS `updated_on` from (((`seedstore`.`transfer_logs` left join `seedstore`.`containers` `c` on((`c`.`id` = `seedstore`.`transfer_logs`.`container_id`))) left join `seedstore`.`containers` `s` on((`s`.`id` = `seedstore`.`transfer_logs`.`source_id`))) left join `seedstore`.`containers` `t` on((`t`.`id` = `seedstore`.`transfer_logs`.`target_id`)))"));
    }

    /**
     * Create an aliased <code>seedstore_db.view_table_transfers</code> table
     * reference
     */
    public ViewTableTransfers(String alias) {
        this(DSL.name(alias), VIEW_TABLE_TRANSFERS);
    }

    /**
     * Create an aliased <code>seedstore_db.view_table_transfers</code> table
     * reference
     */
    public ViewTableTransfers(Name alias) {
        this(alias, VIEW_TABLE_TRANSFERS);
    }

    /**
     * Create a <code>seedstore_db.view_table_transfers</code> table reference
     */
    public ViewTableTransfers() {
        this(DSL.name("view_table_transfers"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SeedstoreDb.SEEDSTORE_DB;
    }

    @Override
    public ViewTableTransfers as(String alias) {
        return new ViewTableTransfers(DSL.name(alias), this);
    }

    @Override
    public ViewTableTransfers as(Name alias) {
        return new ViewTableTransfers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableTransfers rename(String name) {
        return new ViewTableTransfers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableTransfers rename(Name name) {
        return new ViewTableTransfers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, Integer, String, String, Integer, String, String, Integer, String, String, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
    // @formatter:on
}
