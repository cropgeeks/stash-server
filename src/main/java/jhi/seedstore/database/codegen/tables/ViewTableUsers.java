/*
 * This file is generated by jOOQ.
 */
package jhi.seedstore.database.codegen.tables;


import java.sql.Timestamp;
import java.util.Map;

import jhi.seedstore.database.binding.UserStatsBinding;
import jhi.seedstore.database.codegen.SeedstoreDb;
import jhi.seedstore.database.codegen.enums.ViewTableUsersUserType;
import jhi.seedstore.database.codegen.tables.records.ViewTableUsersRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableUsers extends TableImpl<ViewTableUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>seedstore_db.view_table_users</code>
     */
    public static final ViewTableUsers VIEW_TABLE_USERS = new ViewTableUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewTableUsersRecord> getRecordType() {
        return ViewTableUsersRecord.class;
    }

    /**
     * The column <code>seedstore_db.view_table_users.id</code>.
     */
    public final TableField<ViewTableUsersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>seedstore_db.view_table_users.name</code>.
     */
    public final TableField<ViewTableUsersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>seedstore_db.view_table_users.email_address</code>.
     */
    public final TableField<ViewTableUsersRecord, String> EMAIL_ADDRESS = createField(DSL.name("email_address"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>seedstore_db.view_table_users.user_type</code>.
     */
    public final TableField<ViewTableUsersRecord, ViewTableUsersUserType> USER_TYPE = createField(DSL.name("user_type"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("reference", SQLDataType.VARCHAR)).asEnumDataType(jhi.seedstore.database.codegen.enums.ViewTableUsersUserType.class), this, "");

    /**
     * The column <code>seedstore_db.view_table_users.last_login</code>.
     */
    public final TableField<ViewTableUsersRecord, Timestamp> LAST_LOGIN = createField(DSL.name("last_login"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column <code>seedstore_db.view_table_users.created_on</code>.
     */
    public final TableField<ViewTableUsersRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column <code>seedstore_db.view_table_users.stats</code>.
     */
    public final TableField<ViewTableUsersRecord, Map<String,Integer>> STATS = createField(DSL.name("stats"), SQLDataType.JSON, this, "", new UserStatsBinding());

    private ViewTableUsers(Name alias, Table<ViewTableUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewTableUsers(Name alias, Table<ViewTableUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_table_users` as select `seedstore`.`users`.`id` AS `id`,`seedstore`.`users`.`name` AS `name`,`seedstore`.`users`.`email_address` AS `email_address`,`seedstore`.`users`.`user_type` AS `user_type`,`seedstore`.`users`.`last_login` AS `last_login`,`seedstore`.`users`.`created_on` AS `created_on`,json_objectagg(ifnull(`t`.`yearmonth`,'null'),`t`.`count`) AS `stats` from (`seedstore`.`users` left join (select `seedstore`.`transfer_logs`.`user_id` AS `user_id`,date_format(`seedstore`.`transfer_logs`.`created_on`,'%Y-%m') AS `yearmonth`,count(1) AS `count` from `seedstore`.`transfer_logs` where ((to_days(now()) - to_days(`seedstore`.`transfer_logs`.`created_on`)) <= 365) group by `seedstore`.`transfer_logs`.`user_id`,date_format(`seedstore`.`transfer_logs`.`created_on`,'%Y-%m')) `t` on((`t`.`user_id` = `seedstore`.`users`.`id`))) group by `seedstore`.`users`.`id`"));
    }

    /**
     * Create an aliased <code>seedstore_db.view_table_users</code> table
     * reference
     */
    public ViewTableUsers(String alias) {
        this(DSL.name(alias), VIEW_TABLE_USERS);
    }

    /**
     * Create an aliased <code>seedstore_db.view_table_users</code> table
     * reference
     */
    public ViewTableUsers(Name alias) {
        this(alias, VIEW_TABLE_USERS);
    }

    /**
     * Create a <code>seedstore_db.view_table_users</code> table reference
     */
    public ViewTableUsers() {
        this(DSL.name("view_table_users"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SeedstoreDb.SEEDSTORE_DB;
    }

    @Override
    public ViewTableUsers as(String alias) {
        return new ViewTableUsers(DSL.name(alias), this);
    }

    @Override
    public ViewTableUsers as(Name alias) {
        return new ViewTableUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableUsers rename(String name) {
        return new ViewTableUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableUsers rename(Name name) {
        return new ViewTableUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, ViewTableUsersUserType, Timestamp, Timestamp, Map<String,Integer>> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
    // @formatter:on
}
