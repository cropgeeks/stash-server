/*
 * This file is generated by jOOQ.
 */
package jhi.seedstore.database.codegen.tables;


import java.sql.Date;
import java.sql.Timestamp;

import jhi.seedstore.database.codegen.SeedstoreDb;
import jhi.seedstore.database.codegen.tables.records.TrialsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trials extends TableImpl<TrialsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>seedstore_db.trials</code>
     */
    public static final Trials TRIALS = new Trials();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrialsRecord> getRecordType() {
        return TrialsRecord.class;
    }

    /**
     * The column <code>seedstore_db.trials.id</code>.
     */
    public final TableField<TrialsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>seedstore_db.trials.name</code>.
     */
    public final TableField<TrialsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>seedstore_db.trials.description</code>.
     */
    public final TableField<TrialsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>seedstore_db.trials.project_id</code>.
     */
    public final TableField<TrialsRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>seedstore_db.trials.row_count</code>.
     */
    public final TableField<TrialsRecord, Short> ROW_COUNT = createField(DSL.name("row_count"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>seedstore_db.trials.column_count</code>.
     */
    public final TableField<TrialsRecord, Short> COLUMN_COUNT = createField(DSL.name("column_count"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>seedstore_db.trials.shapefile</code>.
     */
    public final TableField<TrialsRecord, byte[]> SHAPEFILE = createField(DSL.name("shapefile"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>seedstore_db.trials.user_id</code>.
     */
    public final TableField<TrialsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>seedstore_db.trials.start_date</code>.
     */
    public final TableField<TrialsRecord, Date> START_DATE = createField(DSL.name("start_date"), SQLDataType.DATE, this, "");

    /**
     * The column <code>seedstore_db.trials.end_date</code>.
     */
    public final TableField<TrialsRecord, Date> END_DATE = createField(DSL.name("end_date"), SQLDataType.DATE, this, "");

    /**
     * The column <code>seedstore_db.trials.created_on</code>.
     */
    public final TableField<TrialsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>seedstore_db.trials.updated_on</code>.
     */
    public final TableField<TrialsRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Trials(Name alias, Table<TrialsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trials(Name alias, Table<TrialsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>seedstore_db.trials</code> table reference
     */
    public Trials(String alias) {
        this(DSL.name(alias), TRIALS);
    }

    /**
     * Create an aliased <code>seedstore_db.trials</code> table reference
     */
    public Trials(Name alias) {
        this(alias, TRIALS);
    }

    /**
     * Create a <code>seedstore_db.trials</code> table reference
     */
    public Trials() {
        this(DSL.name("trials"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SeedstoreDb.SEEDSTORE_DB;
    }

    @Override
    public Identity<TrialsRecord, Integer> getIdentity() {
        return (Identity<TrialsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TrialsRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Trials.TRIALS, DSL.name("KEY_trials_PRIMARY"), new TableField[] { Trials.TRIALS.ID }, true);
    }

    @Override
    public Trials as(String alias) {
        return new Trials(DSL.name(alias), this);
    }

    @Override
    public Trials as(Name alias) {
        return new Trials(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trials rename(String name) {
        return new Trials(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trials rename(Name name) {
        return new Trials(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, Integer, Short, Short, byte[], Integer, Date, Date, Timestamp, Timestamp> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
    // @formatter:on
}
