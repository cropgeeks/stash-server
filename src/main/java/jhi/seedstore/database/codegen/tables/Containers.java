/*
 * This file is generated by jOOQ.
 */
package jhi.seedstore.database.codegen.tables;


import jhi.seedstore.database.codegen.SeedstoreDb;
import jhi.seedstore.database.codegen.tables.records.ContainersRecord;
import org.jooq.*;
import org.jooq.impl.Internal;
import org.jooq.impl.*;

import java.sql.Timestamp;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Containers extends TableImpl<ContainersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>seedstore_db.containers</code>
     */
    public static final Containers CONTAINERS = new Containers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContainersRecord> getRecordType() {
        return ContainersRecord.class;
    }

    /**
     * The column <code>seedstore_db.containers.id</code>.
     */
    public final TableField<ContainersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>seedstore_db.containers.barcode</code>.
     */
    public final TableField<ContainersRecord, String> BARCODE = createField(DSL.name("barcode"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>seedstore_db.containers.description</code>.
     */
    public final TableField<ContainersRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>seedstore_db.containers.container_type_id</code>.
     */
    public final TableField<ContainersRecord, Integer> CONTAINER_TYPE_ID = createField(DSL.name("container_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>seedstore_db.containers.parent_container_id</code>.
     */
    public final TableField<ContainersRecord, Integer> PARENT_CONTAINER_ID = createField(DSL.name("parent_container_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>seedstore_db.containers.is_active</code>.
     */
    public final TableField<ContainersRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>seedstore_db.containers.trial_id</code>.
     */
    public final TableField<ContainersRecord, Integer> TRIAL_ID = createField(DSL.name("trial_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>seedstore_db.containers.project_id</code>.
     */
    public final TableField<ContainersRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>seedstore_db.containers.created_on</code>.
     */
    public final TableField<ContainersRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>seedstore_db.containers.updated_on</code>.
     */
    public final TableField<ContainersRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Containers(Name alias, Table<ContainersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Containers(Name alias, Table<ContainersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>seedstore_db.containers</code> table reference
     */
    public Containers(String alias) {
        this(DSL.name(alias), CONTAINERS);
    }

    /**
     * Create an aliased <code>seedstore_db.containers</code> table reference
     */
    public Containers(Name alias) {
        this(alias, CONTAINERS);
    }

    /**
     * Create a <code>seedstore_db.containers</code> table reference
     */
    public Containers() {
        this(DSL.name("containers"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SeedstoreDb.SEEDSTORE_DB;
    }

    @Override
    public Identity<ContainersRecord, Integer> getIdentity() {
        return (Identity<ContainersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ContainersRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Containers.CONTAINERS, DSL.name("KEY_containers_PRIMARY"), new TableField[] { Containers.CONTAINERS.ID }, true);
    }

    @Override
    public Containers as(String alias) {
        return new Containers(DSL.name(alias), this);
    }

    @Override
    public Containers as(Name alias) {
        return new Containers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Containers rename(String name) {
        return new Containers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Containers rename(Name name) {
        return new Containers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, Integer, Integer, Boolean, Integer, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
    // @formatter:on
}
