/*
 * This file is generated by jOOQ.
 */
package jhi.seedstore.database.codegen.tables;


import java.sql.Date;

import jhi.seedstore.database.binding.IntArrayBinding;
import jhi.seedstore.database.codegen.SeedstoreDb;
import jhi.seedstore.database.codegen.tables.records.ViewTableTransferEventsRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewTableTransferEvents extends TableImpl<ViewTableTransferEventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>seedstore_db.view_table_transfer_events</code>
     */
    public static final ViewTableTransferEvents VIEW_TABLE_TRANSFER_EVENTS = new ViewTableTransferEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewTableTransferEventsRecord> getRecordType() {
        return ViewTableTransferEventsRecord.class;
    }

    /**
     * The column <code>seedstore_db.view_table_transfer_events.date</code>.
     */
    public final TableField<ViewTableTransferEventsRecord, Date> DATE = createField(DSL.name("date"), SQLDataType.DATE, this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfer_events.source_id</code>.
     */
    public final TableField<ViewTableTransferEventsRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfer_events.source_barcode</code>.
     */
    public final TableField<ViewTableTransferEventsRecord, String> SOURCE_BARCODE = createField(DSL.name("source_barcode"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfer_events.source_type</code>.
     */
    public final TableField<ViewTableTransferEventsRecord, String> SOURCE_TYPE = createField(DSL.name("source_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfer_events.target_id</code>.
     */
    public final TableField<ViewTableTransferEventsRecord, Integer> TARGET_ID = createField(DSL.name("target_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfer_events.target_barcode</code>.
     */
    public final TableField<ViewTableTransferEventsRecord, String> TARGET_BARCODE = createField(DSL.name("target_barcode"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfer_events.target_type</code>.
     */
    public final TableField<ViewTableTransferEventsRecord, String> TARGET_TYPE = createField(DSL.name("target_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>seedstore_db.view_table_transfer_events.user_id</code>.
     */
    public final TableField<ViewTableTransferEventsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfer_events.user_name</code>.
     */
    public final TableField<ViewTableTransferEventsRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfer_events.container_count</code>.
     */
    public final TableField<ViewTableTransferEventsRecord, Long> CONTAINER_COUNT = createField(DSL.name("container_count"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>seedstore_db.view_table_transfer_events.container_ids</code>.
     */
    public final TableField<ViewTableTransferEventsRecord, Integer[]> CONTAINER_IDS = createField(DSL.name("container_ids"), SQLDataType.JSON, this, "", new IntArrayBinding());

    private ViewTableTransferEvents(Name alias, Table<ViewTableTransferEventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewTableTransferEvents(Name alias, Table<ViewTableTransferEventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_table_transfer_events` as select cast(`seedstore`.`transfer_logs`.`created_on` as date) AS `date`,`s`.`id` AS `source_id`,`s`.`barcode` AS `source_barcode`,`st`.`name` AS `source_type`,`t`.`id` AS `target_id`,`t`.`barcode` AS `target_barcode`,`tt`.`name` AS `target_type`,`seedstore`.`users`.`id` AS `user_id`,`seedstore`.`users`.`name` AS `user_name`,count(1) AS `container_count`,json_arrayagg(`seedstore`.`transfer_logs`.`container_id`) AS `container_ids` from (((((`seedstore`.`transfer_logs` left join `seedstore`.`containers` `s` on((`seedstore`.`transfer_logs`.`source_id` = `s`.`id`))) left join `seedstore`.`containers` `t` on((`seedstore`.`transfer_logs`.`target_id` = `t`.`id`))) left join `seedstore`.`container_types` `st` on((`st`.`id` = `s`.`container_type_id`))) left join `seedstore`.`container_types` `tt` on((`tt`.`id` = `t`.`container_type_id`))) left join `seedstore`.`users` on((`seedstore`.`users`.`id` = `seedstore`.`transfer_logs`.`user_id`))) group by `seedstore`.`transfer_logs`.`source_id`,`seedstore`.`transfer_logs`.`target_id`,`seedstore`.`transfer_logs`.`user_id`,cast(`seedstore`.`transfer_logs`.`created_on` as date)"));
    }

    /**
     * Create an aliased <code>seedstore_db.view_table_transfer_events</code>
     * table reference
     */
    public ViewTableTransferEvents(String alias) {
        this(DSL.name(alias), VIEW_TABLE_TRANSFER_EVENTS);
    }

    /**
     * Create an aliased <code>seedstore_db.view_table_transfer_events</code>
     * table reference
     */
    public ViewTableTransferEvents(Name alias) {
        this(alias, VIEW_TABLE_TRANSFER_EVENTS);
    }

    /**
     * Create a <code>seedstore_db.view_table_transfer_events</code> table
     * reference
     */
    public ViewTableTransferEvents() {
        this(DSL.name("view_table_transfer_events"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SeedstoreDb.SEEDSTORE_DB;
    }

    @Override
    public ViewTableTransferEvents as(String alias) {
        return new ViewTableTransferEvents(DSL.name(alias), this);
    }

    @Override
    public ViewTableTransferEvents as(Name alias) {
        return new ViewTableTransferEvents(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableTransferEvents rename(String name) {
        return new ViewTableTransferEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewTableTransferEvents rename(Name name) {
        return new ViewTableTransferEvents(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Date, Integer, String, String, Integer, String, String, Integer, String, Long, Integer[]> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
    // @formatter:on
}
