/*
 * This file is generated by jOOQ.
 */
package jhi.seedstore.database.codegen.tables;


import jhi.seedstore.database.codegen.SeedstoreDb;
import jhi.seedstore.database.codegen.tables.records.ContainerAttributesRecord;
import org.jooq.*;
import org.jooq.impl.Internal;
import org.jooq.impl.*;

import java.sql.Timestamp;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContainerAttributes extends TableImpl<ContainerAttributesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>seedstore_db.container_attributes</code>
     */
    public static final ContainerAttributes CONTAINER_ATTRIBUTES = new ContainerAttributes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContainerAttributesRecord> getRecordType() {
        return ContainerAttributesRecord.class;
    }

    /**
     * The column <code>seedstore_db.container_attributes.attribute_id</code>.
     */
    public final TableField<ContainerAttributesRecord, Integer> ATTRIBUTE_ID = createField(DSL.name("attribute_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>seedstore_db.container_attributes.container_id</code>.
     */
    public final TableField<ContainerAttributesRecord, Integer> CONTAINER_ID = createField(DSL.name("container_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>seedstore_db.container_attributes.attribute_value</code>.
     */
    public final TableField<ContainerAttributesRecord, String> ATTRIBUTE_VALUE = createField(DSL.name("attribute_value"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>seedstore_db.container_attributes.created_on</code>.
     */
    public final TableField<ContainerAttributesRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>seedstore_db.container_attributes.updated_on</code>.
     */
    public final TableField<ContainerAttributesRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private ContainerAttributes(Name alias, Table<ContainerAttributesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContainerAttributes(Name alias, Table<ContainerAttributesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>seedstore_db.container_attributes</code> table
     * reference
     */
    public ContainerAttributes(String alias) {
        this(DSL.name(alias), CONTAINER_ATTRIBUTES);
    }

    /**
     * Create an aliased <code>seedstore_db.container_attributes</code> table
     * reference
     */
    public ContainerAttributes(Name alias) {
        this(alias, CONTAINER_ATTRIBUTES);
    }

    /**
     * Create a <code>seedstore_db.container_attributes</code> table reference
     */
    public ContainerAttributes() {
        this(DSL.name("container_attributes"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : SeedstoreDb.SEEDSTORE_DB;
    }

    @Override
    public UniqueKey<ContainerAttributesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(ContainerAttributes.CONTAINER_ATTRIBUTES, DSL.name("KEY_container_attributes_PRIMARY"), new TableField[] { ContainerAttributes.CONTAINER_ATTRIBUTES.ATTRIBUTE_ID, ContainerAttributes.CONTAINER_ATTRIBUTES.CONTAINER_ID }, true);
    }

    @Override
    public ContainerAttributes as(String alias) {
        return new ContainerAttributes(DSL.name(alias), this);
    }

    @Override
    public ContainerAttributes as(Name alias) {
        return new ContainerAttributes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContainerAttributes rename(String name) {
        return new ContainerAttributes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContainerAttributes rename(Name name) {
        return new ContainerAttributes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, Timestamp, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
    // @formatter:on
}
